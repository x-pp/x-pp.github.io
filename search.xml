<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringBoot项目中将Tomcat替换为别的服务器]]></title>
    <url>%2F2019%2F04%2F30%2FSpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%86Tomcat%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%88%AB%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[SpringBoot项目中替换Tomcat服务器非常简单。只需要修改pom.xml文件就行了 还是使用我们之前创建的SpringBoot基础项目，IDEA中创建SpringBoot项目 Tomcat为服务器时，项目启动控制台输入为 替换为jetty服务器修改pom.xml文件原来的pom.xml文件修改pom.xml为如下,修改的地方已经框起来了。然后点击右下角Import Changes更新依赖快捷复制:1234567891011121314151617181920212223&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 原理： 因为SpringBoot项目默认是使用Tomcat作为服务器,所以我们在spring-boot-starter-web依赖中移除tomcat的依赖，然后增加jetty依赖，项目就会使用jetty作为服务器。 重新启动项目控制台输出信息发现由之前的Tomcat变成了Jetty至此，将Tomcat改造成Jetty服务器已经完成。 替换成Undertow服务器 Undertow是一个红帽公司开源的java服务器，具有非常好的性能，在SpringBoot中也得到了很好的支持，配置方式与Jetty类似，只需要将Jetty依赖改成Undertow]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot项目中配置https]]></title>
    <url>%2F2019%2F04%2F30%2FSpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AEhttps%2F</url>
    <content type="text"><![CDATA[由于HTTPS具有良好的安全性,在开发中得到了越来越广泛的应用。对于个人而言,一个HTTPS证书的价格还是有点贵,幸好jdk中有免费生成证书的管理工具。 1.生成证书在/jdk/bin目录下打开命令行,输入下面的命令1keytool -genkey -alias tomcat -keyalg RSA -keystore F:\xpp.p12 -validity 365 解析123451. -genkey 表示要创建一个新的密钥2. -alias 表示keystore的别名3. -keyalg 表示使用的加密算法RSA,是一种非对称加密算法4. -keystore 表示密钥生成的位置5. -validity 表示密钥的有效时间，单位为天 执行完命令，会在F盘下生成一个xpp.p12文件 2.项目中配置https使用我们之前创建的SpringBoot基础项目，IDEA中创建SpringBoot项目 2.1 将xpp.p12文件复制到项目的resources目录下 2.2 application.properties中配置属性 123server.ssl.key-store=classpath:xpp.p12server.ssl.key-store-password=123456server.ssl.key-alias=tomcat server.ssl.key-store-password为命令行中要你输入两次的密码，记得修改成你自己的. 启动项目控制台打印信息，由之前的http变成了https 访问继续访问之前的http://localhost:8080/hello/speak,已经访问不了了 换成https://localhost:8080/hello/speak再次访问，可能会弹出什么不信任的信息，不用管，点击直接访问。则得到了我们想要的结果数据。 3.重定向希望访问http的8000端口，则重定向到https的8080端口创建一个config包，并在该包下创建一个TomcatConfig类TomcatConfig类代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.xpp.demo01.comfig;import org.apache.catalina.Context;import org.apache.catalina.connector.Connector;import org.apache.tomcat.util.descriptor.web.SecurityCollection;import org.apache.tomcat.util.descriptor.web.SecurityConstraint;import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * @author by liangliping * @Classname TomcatConfig * @Description TODO * @Date 2019\4\30 0030 11:42 */@Configurationpublic class TomcatConfig &#123; @Bean TomcatServletWebServerFactory tomcatServletWebServerFactory()&#123; TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory()&#123; @Override protected void postProcessContext(Context context) &#123; super.postProcessContext(context); SecurityConstraint securityConstraint=new SecurityConstraint(); securityConstraint.setUserConstraint("CONFIDENTIAL"); SecurityCollection collection=new SecurityCollection(); collection.addPattern("/*"); securityConstraint.addCollection(collection); context.addConstraint(securityConstraint); &#125; &#125;; factory.addAdditionalTomcatConnectors(createTomcatConnector()); return factory; &#125; private Connector createTomcatConnector()&#123; Connector connector=new Connector("org.apache.coyote.http11.Http11NioProtocol"); connector.setScheme("http"); connector.setPort(8000); connector.setSecure(false); connector.setRedirectPort(8080); return connector; &#125;&#125; 启动项目，访问http://localhost:8000/hello/speak，发现跳转到了https://localhost:8080/hello/speak]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[IDEA中创建SpringBoot项目]]></title>
    <url>%2F2019%2F04%2F30%2FIDEA%E4%B8%AD%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[New-&gt;Project.. 选择SpringBoot Initializr 填写项目基本信息 选择依赖，目前只选择一个Web 选择项目创建路径 创建完成项目的结构 项目默认扫描Demo01Application类下的Bean,所以在com.xpp.demo01包下建一个controller包,右键com.xpp.demo01包,New-&gt;Package 填写创建的包名controller 在上一步创建的controller包下创建一个HelloController类 HelloController类中代码如下 启动项目方法1 启动项目方法2 控制台打印信息 浏览器访问http://localhost:8080/hello/speak]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot多模块项目]]></title>
    <url>%2F2019%2F04%2F22%2FSpringBoot%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[一、创建SpringBoot项目码云地址 使用Idea创建一个SpringBoot项目,目前只添加了web和test依赖，创建完成结构如下图 删除src和一些无用的东西 二、创建子模块右键上一步建的项目，选择New-&gt;Module 选择Spring Initializr创建子SpringBoot项目 创建三个子项目123dataserviceweb 创建完成后项目的结构图： data用于数据访问层 service为业务层,该模块依赖data模块 web为前端提供api接口,该模块依赖service模块 各个模块的代码，详情码云 三、项目的打包项目的打包，只需要在web模块，所以，不管是父项目还是data、service子模块中的pom.xml都不需要添加spring-boot-maven-plugin插件只需要在web模块添加 123456789101112131415161718&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.21.0&lt;/version&gt; &lt;configuration&gt; &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt; &lt;!--跳过测试运行--&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 然后再Idea窗口的右边点击Maven Projects,选择父项目springboot-modele(带一个root的),展开Lifecycle，点击package,则开始进行项目的打包。 打包完都提示全部成功，就可以在web模块下的target文件夹下有打包完成的jar包。 可用下面命令运行该jar包1java -jar web-0.0.1-SNAPSHOT.jar 四、遇到的问题service模块无法注入data模块的repo类(data模块用的是jpa),web模块无法注入service模块的service类一开始怀疑是没扫描到该层的包，所以在web子模块的WebApplication类上增加注解@ComponentScan(&quot;com.xpp&quot;)不起作用,最后搜索到一篇文章。解决方法：移动web模块的WebApplication类 一开始WebApplication类的位置如图： 右键WebApplication类，选择Refactor-&gt;Move 弹出： 将com.xpp.web修改成com.xpp,修改后点击Refactor 最终WebApplication类的位置：]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown常用操作]]></title>
    <url>%2F2019%2F04%2F18%2Fmarkdown%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[Markdown是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 一、标题12345# 一级标题## 二级标题### 三级标题#### 四级标题...... 二、引用1&gt; 文本（注意：&gt;和文本间有个空格） 效果： 文本（注意：&gt;和文本间有个空格） 三、列表3.1无序列表123* A* B* C 效果： A B C 3.2有序列表1231. A2. B3. C 效果： A B C 四、图片和连接4.1图片123两种方式![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg "Optional title") 描述： 一个感叹号！ 接着一个方括号，里面放上图片的替代文字，图片加载不出，则显示该内容 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 效果： 4.2连接和图片类似，少个感叹号！123[普通链接](https://www.mdeditor.com/)[普通链接带标题](https://www.mdeditor.com/ "普通链接带标题")直接链接：&lt;https://www.mdeditor.com&gt; 效果： 普通链接 普通链接带标题 直接链接：https://www.baidu.com 五、斜体和粗体123*一个星包含的是斜体***两个星包含的是粗体**\*如果想在前后插入星号，用反斜\* 效果： 一个星包含的是斜体 两个星包含的是粗体 *如果想在前后插入星号，用反斜杠* 六、分割线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：1234* * ****---- - - 效果： 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用&lt;em&gt;标签,你可以在星号的前面加上反斜杠：1\*literal asterisks\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 表格123456表头1|表头2|表头3-----|-----|-----v1|v2|v3 v1|v2|v3v1|v2|v3v1|v2|v3 表头1 表头2 表头3 v1 v2 v3 v1 v2 v3 v1 v2 v3 v1 v2 v3 123456表头1|表头2|表头3:-----|-----:|-----:v1|v2|v3 v1|v2|v3v1|v2|v3v1|v2|v3 表头1 表头2 表头3 v1 v2 v3 v1 v2 v3 v1 v2 v3 v1 v2 v3]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello</category>
      </categories>
  </entry>
</search>
